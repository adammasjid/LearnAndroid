													FUNDAMENTAL ANDROID
													
	Cara untuk membaca dokmentasi = https://developer.android.com/docs / ctrl + Q pada android studio untuk membaca dokumentasi	
	ShortCut untuk autocomplication method bawaan Android = ctrl(hold) + space and choice the method											
	progress belajar : https://www.dicoding.com/academies/14/tutorials/270?from=269		
	progress belajar : ##########_________________________________________ 20%							

*	Komponen dasar yang digunakan untuk membuat aplikasi android :
	- Activity = adalah hal yang menangani window (tampilan) yang akan ditampilkan di interface, dan activity memiliki life cycle bawaan android
	- Intent = untuk menjalankan sebuah activity, mengirim sebuat broadcast receiver, dan dapat juga berkomunikasi dengan service yang berjalan
	- Fragment = komponen view yang fleksibel dan dapat disisipkan pada sebuah tampilan dari activity. Fragment memiliki daur hidup sendiri sehingga tidak tergantung pada activity yang disisipkan. 
	- threads = Semua proses yang ada di dalam sebuah aplikasi ada di dalam thread. Secara default, proses yang tampil di layar merupakan proses yang ada di dalam main thread / ui thread.
	- service = Service merupakan komponen tidak terlihat yang dapat digunakan untuk menjalankan suatu proses di dalam aplikasi. 
	- Receiver = Receiver menggunakan pola publish-subscribe. Ketika terjadi sebuah event dibangkitkan (di-publish), komponen lain yang telah mendaftar
			  untuk mendengarkan event tersebut (subscribed) dapat menjalankan perintah-perintah tertentu.
		
1. Activity : ( https://developer.android.com/guide/components/activities )
	- WAJIB untuk mengetahuii life cycle dari Activity ( https://developer.android.com/guide/components/activities#Lifecycle )
	- Activity merupakan salah satu komponen penting Android yang memiliki daur hidup (life cycle) dalam sebuah stack pada virtual sandbox
	  yang disiapkan oleh Dalvik Virtual Machine (DVM) atau Android Runtime (ART) yang bersifat last in first out.
	- Sebuah class Java / kotlin dinyatakan sebuah activity jika mewarisi (extends) superclass Activity atau turunannya seperti AppCompatActivity dan FragmentActivity.
	- method yang ada pada lifeCycle Activity disebut CallBack Method digunakan untuk melakukan proses terkait state pada activity

2. Intent adalah mekanisme untuk melakukan sebuat action / komunikasi antar komponen seperti activity, services, dan broadcast receiver
	- intent terbagi menjadi dua yaitu, intent exsplisit dan implisit
		# intent explisit adalah intent yang memerlukan nama kelas yang ditiju untuk mengaktivkan komponen tersebut
		# intent implisit Adalah tipe intent yang tidak memerlukan detail nama kelas yang ingin diaktifkan. Model ini memungkinkan komponen dari aplikasi lain bisa merespon request intent yang dijalankan.
		# ( https://developer.android.com/training/basics/intents/result.html = intent result )
		# ( https://developer.android.com/guide/components/intents-filters.html = intent filters )
		
3. Fragment : ( https://developer.android.com/guide/components/fragments )
	- salah satu penggunaan fragment adalah untuk membuat banyak tampilan tanpa berpindah-pindah activity
	- didalam fragment kita bisa menerapkan back stack dengan method addToBackStack()
	- Jika Anda menambahkan transaksi ke dalam back stack, maka ia disimpan di dalam back stack, sehingga ketika Anda menekan tombol back, maka activity akan memanggil transaksi sebelumnya.
	- fragment memiliki life cycle nya sendiri yang berbeda dengan activity
	- sedikit perbedaan antara Activity dan Fragment dari segi code :
	  a) Context menggunakan getActivity/activity, bukan this@MainActivity/MainActivity.this
	  b) Pemanggilan id menggunakan view.findFiewById, bukan findFiewById
	  
4. Widget And Layout (komponen tampilan UI and UX ) : ( https://www.uplabs.com/ dan https://www.uplabs.com/android ) untuk resource UI and UX

	@ ListView
		- langkah untuk menerapkan listview : ( https://developer.android.com/reference/android/widget/Adapter	 )
		  a) Tambahkan objek listview di berkas layout xml dari activity / fragment.
		  b) Definisikan model kelas yang akan digunakan sebagai data source.
		  c) Buat berkas layout xml untuk baris item di listview.
		  d) Buat sebuah kelas adapter yang inherit ke BaseAdapter.
		  e) Definisikan objek listview dan selanjutnya pasang objek adapter (binding) agar bisa menampilkan koleksi data ke dalam ListView.
	
	@ Library
		- Library adalah tools atau source code yang sudah dibuat oleh orang lain (pihak ketiga) dan bisa dipakai di dalam aplikasi 
		- Repository github yang berisi kumpulan library
		  a) https://github.com/wasabeef/awesome-android-libraries 
		  b) https://github.com/wasabeef/awesome-android-ui
		  c) https://android-arsenal.com/
		  
	@ View and ViewGroup : ( https://developer.android.com/guide/topics/ui/declaring-layout )
		- view (widget) adalah obyek yang menggambar komponen tampilan ke layar yang mana pengguna dapat melihat dan berinteraksi langsung. komponen turunan view :
		  a) TextView
		  b) ImageView
		  c) RadioGroup->RadioButton
		  d) ListView
		  e) GridView
		  f) ScrollView
		  f) CheckBox
		- viewgroup (layout) adalah sebuah objek yang mewadahi obyek-obyek view dan viewgroup itu sendiri sehingga membentuk satu kesatuan tampilan aplikasi yang utuh. komponen turunan viewGroup :
		  a) LinearLayout = Akan menempatkan komponen-komponen di dalamnya secara horizontal atau vertikal
		  b) RelativeLayout
		  c)	FrameLayout
		  d) ConstraintLayout = Pembahasan ada bawah
		  e) TableLayout
		- Constraint Layout : ( https://developer.android.com/reference/android/support/constraint/ConstraintLayout )
		  Ketika Anda menggunakan constraint layout, hasil dari text editor menjadikan berkas layout tersebut menjadi lebih banyak, berbeda dengan Layout lain, adapun bagian dari constraintLayout :
		  a) RelativPositioning = salah satu dasar pembuatan tata letak di constraintlayout. Relative Positioning memungkinkan Anda untuk memposisikan widget secara relatif terhadap widget yang lain.
		  b) Margins = terdapat juga margin di constraint
		  c) Centering Positioning and Bias = untuk memindahkan posisi sesuai dengan keinginan Anda.
	
	@ Style and Theme : ( https://developer.android.com/design/index.html )
		- style
		  a) Style merupakan sebuah kumpulan properti yang dibutuhkan untuk mendefinisikan bagaimana sebuah komponen view dan layar jendela (bisa activity maupun fragment) ditampilkan
		  b) location: res →  values  →  styles.xml.
		  c) Contoh properti ini adalah height, width, background_color.
		- Theme
		  a) Theme atau tema itu sendiri merupakan sebuah style yang diterapkan khusus untuk activity dan application pada berkas AndroidManifest.xml
		  b) location : res →  values  →  styles.xml. dan res →  values  →  colors.xml 
		
	@ RecycleView : ( https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html )
		- ini adalah versi update dari ListView
		- Recycle view memiliki 3 komponen :
		  |			|			|	  	|			|		|
		  | RecycleView 	|	------>	| Adapter	|	------>	| Dataset	| + Item Animator
		  |LayoutManager	|			|__________|			| ________	|
		  |_____________|
		  a) RecyclerView = Komponen antarmuka yang bertugas untuk menampilkan data set yang dimiliki di dalamnya. 
		     LayoutManager = akan mengatur posisi tampilan data baik itu secara list (vertikal), grid (baris dan kolom) atau staggeredgrid (grid yang memiliki susunan tak seragam / tak beraturan)
		  b) Adapter = Komponen yang akan mengatur bagaimana menampilkan data set ke dalam RecyclerView. 
		  c) Dataset = Kumpulan data yang dimiliki dan ingin ditampilkan. Bisa berupa array, list maupun obyek map.
		  d) ItemAnimator = untuk menambahkan animasi pada setiap itemnya
		  
	@ CustomView : ( https://developer.android.com/guide/topics/ui/custom-components = doc about custom view ) 
			    ( https://codelabs.developers.google.com/codelabs/advanced-android-training-custom-view-from-scratch/index.html?#0 = best practice from google )
		- bisa memberi ide mengenai kontrol apa saja yang bisa Anda berikan kepada CustomView yang Anda buat
	
	@ ActionBar and Navigation
		- Pada modul action bar dan navigation, kita akan belajar tentang action bar dan navigation drawer di dalam aplikasi Android
	
	@ Localozation
		- Untuk menambah jumlah pengguna dari aplikasi, tentunya kita perlu merangkul lebih banyak pengguna, baik dari dalam maupun luar negeri.
	
	@ Satuan Dimensi Android
		- dp (density pixel) adalah satuan untuk menentukan ukuran komponen non-text, ini adalah satuan yang lebih kompetibel bagi semua device dibanding dengan menggunakan px
		- sp (scale pixel) adalah satuan untuk menentukan ukuran komponen text 
		- docummentation untuk satuan dimensi android :
		  a) https://developer.android.com/guide/practices/screens_support.html (multi screen support)
		  b) https://jampasir.wordpress.com/2015/07/15/android-unit-px-pixel-dpdip-density-independent-pixel-dan-sp-scale-independent-pixels/ (about dp and sp)
		
5. Debugging : 
	- untuk debugging selalu perhatikan logcat pada bagian bahwa editor saat menjalankan aplikasi u/ mengetahui penyebabnya		
	- Bug yg menyebabkan forse close :
	  a) Java Null Pointer Exception
	  b) Java Out of Memory Exception
	  c) Java Index Out Of Bound
	  d) Java Memory Leak
	- Bug yang menyebabkan Not Responding = Android akan menganggap sebuah aplikasi sebagai not responding bila proses yang berjalan di main thread tidak selesai dalam waktu 5 detik
	- Bug yang disebabkan oleh kesalahan logika = bug yang berbahaya karena akan membuat aplikasi tidak sesuai apa yg diinginkan, walaupun tidak terjadi crash
	- Bisa juga memanfaatkan fitur bawaan android studio yaitu gambar BUG  / tekan shift + f9
	- Tool untuk memantau Bug  = https://firebase.google.com/docs/crashlytics/get-started?platform=android&utm_source=fabric&utm_medium=inline_banner&utm_campaign=fabric_sunset&utm_content=kits_crashlytics
	- forum untuk diskusi = https://www.dicoding.com/blog/android-studio-aplikasi-error-apa-yang-harus-dilakukan/
	- Selain Debugging , ada juga istilah LOGGING yang artinya suatu cara untuk mempresentasikan keadaan ( testing ), terhadap aplikasi untuk melihat apa yang terjadi / mencari kesalahan
			
6. Testing :
	- Tipe Testing ada 3 :
	  a) Local unit tests, Terletak pada direktori module-name/src/test/java/. = Tes ini berjalan pada local JVM dan tidak mempunyai akses ke API Android Framework. Biasanya untuk menguji sebuah method / fungsi berjalan sesuai rencana.
	  b) Instrument Test , Terletak pada direktori module-name/src/androidTest/java/. = Tes ini harus berjalan pada peranti Android atau emulator. Digunakan untuk memvalidasi proses interaksi pada User Interface (UI) berjalan dengan lancar
	  c) end to end test , Tes ini seperti Instrumented test, hanya proses yang dilakukan lebih lengkap dari awal sampai akhir, 
	- Gunakan JUnit4 (untuk unit testing) dan Mocito (sebagai mock object)
	
7. Kotlin Android Extensions : ( https://kotlinlang.org/docs/tutorials/android-plugin.html )
	- adalah sebuah plugin yang memungkinkan kita untuk binding sebuah properti ke elemen view. 
	- Plugin ini secara otomatis akan memberi akses langsung ke semua view yang ada di dalam XML. 
	- Dengan demikian kita tidak perlu secara eksplisit melakukan binding ke elemen view menggunakan findViewByID() atau library lainnya.
	- untuk mengimplementasikan kotlin extension = import kotlin.android.synthetic, diikuti dengan nama XML yang akan kita bind ke activity.
	
	
	
	
	
	
	
	
	
	
	