																		FUNDAMENTAL ANDROID
													
	<ShortCut>
		- BACALAH DOCUMENTASI NYA ADA DI LINK ATAU PLATFORM LAIN , JANGAN DI SKIP................
		- Cara untuk membaca dokmentasi = https://developer.android.com/docs / ctrl + Q pada android studio untuk membaca dokumentasi	
		- untuk autocompleting method bawaan Android = ctrl(hold) + space and choice the method
		- untuk langsung menuju ke sumber layout arahkan cursor ke code layout lalu tahan ctrl hingga berbetuk link lalu tekan
		- Documentation About Gradle = ( https://stackoverflow.com/questions/16754643/what-is-gradle-in-android-studio ) ( https://docs.gradle.org/current/userguide/userguide.html#getting-started )
		- untuk select all same word = alt + j
	</ShortCut>	
											
	progress belajar : -	
	progress belajar : ################################################# 100%							

*	Komponen dasar yang digunakan untuk membuat aplikasi android :
	- Activity = adalah hal yang menangani window (tampilan) yang akan ditampilkan di interface, dan activity memiliki life cycle bawaan android
	- Intent = untuk menjalankan sebuah activity, mengirim sebuat broadcast receiver, dan dapat juga berkomunikasi dengan service yang berjalan
	- Fragment = komponen view yang fleksibel dan dapat disisipkan pada sebuah tampilan dari activity. Fragment memiliki daur hidup sendiri sehingga tidak tergantung pada activity yang disisipkan. 
	- threads = Semua proses yang ada di dalam sebuah aplikasi ada di dalam thread. Secara default, proses yang tampil di layar merupakan proses yang ada di dalam main thread / ui thread.
	- service = Service merupakan komponen tidak terlihat yang dapat digunakan untuk menjalankan suatu proses di dalam aplikasi. 
	- Receiver = Receiver menggunakan pola publish-subscribe. Ketika terjadi sebuah event dibangkitkan (di-publish), komponen lain yang telah mendaftar
			  untuk mendengarkan event tersebut (subscribed) dapat menjalankan perintah-perintah tertentu.
		
1. Activity : ( https://developer.android.com/guide/components/activities )
	- WAJIB untuk mengetahuii life cycle dari Activity ( https://developer.android.com/guide/components/activities#Lifecycle )
	- Activity merupakan salah satu komponen penting Android yang memiliki daur hidup (life cycle) dalam sebuah stack pada virtual sandbox
	  yang disiapkan oleh Dalvik Virtual Machine (DVM) atau Android Runtime (ART) yang bersifat last in first out.
	- Sebuah class Java / kotlin dinyatakan sebuah activity jika mewarisi (extends) superclass Activity atau turunannya seperti AppCompatActivity dan FragmentActivity.
	- method yang ada pada lifeCycle Activity disebut CallBack Method digunakan untuk melakukan proses terkait state pada activity	

2. Intent adalah mekanisme untuk melakukan sebuat action / komunikasi antar komponen seperti activity, services, dan broadcast receiver
	- intent terbagi menjadi dua yaitu, intent exsplisit dan implisit
		# intent explisit adalah intent yang memerlukan nama kelas yang ditiju untuk mengaktivkan komponen tersebut
		# intent implisit Adalah tipe intent yang tidak memerlukan detail nama kelas yang ingin diaktifkan. Model ini memungkinkan komponen dari aplikasi lain bisa merespon request intent yang dijalankan.
		# ( https://developer.android.com/training/basics/intents/result.html = intent result )
		# ( https://developer.android.com/guide/components/intents-filters.html = intent filters )
		
3. Fragment : ( https://developer.android.com/guide/components/fragments )
	- salah satu penggunaan fragment adalah untuk membuat banyak tampilan tanpa berpindah-pindah activity
	- didalam fragment kita bisa menerapkan back stack dengan method addToBackStack()
	- Jika Anda menambahkan transaksi ke dalam back stack, maka ia disimpan di dalam back stack, sehingga ketika Anda menekan tombol back, maka activity akan memanggil transaksi sebelumnya.
	- fragment memiliki life cycle nya sendiri yang berbeda dengan activity
	- sedikit perbedaan antara Activity dan Fragment dari segi code :
	  a) Context menggunakan getActivity/activity, bukan this@MainActivity/MainActivity.this
	  b) Pemanggilan id menggunakan view.findFiewById, bukan findFiewById
	  
4. Widget And Layout (komponen tampilan UI and UX ) : ( https://www.uplabs.com/ dan https://www.uplabs.com/android ) untuk resource UI and UX
                                                      ( https://material.io/design#introduction-principles ) for design principle

	@ ListView
		- langkah untuk menerapkan listview : ( https://developer.android.com/reference/android/widget/Adapter	 )
		  a) Tambahkan objek listview di berkas layout xml dari activity / fragment.
		  b) Definisikan model kelas yang akan digunakan sebagai data source.
		  c) Buat berkas layout xml untuk baris item di listview.
		  d) Buat sebuah kelas adapter yang inherit ke BaseAdapter.
		  e) Definisikan objek listview dan selanjutnya pasang objek adapter (binding) agar bisa menampilkan koleksi data ke dalam ListView.
	
	@ Library
		- Library adalah tools atau source code yang sudah dibuat oleh orang lain (pihak ketiga) dan bisa dipakai di dalam aplikasi 
		- Repository github yang berisi kumpulan library
		  a) https://github.com/wasabeef/awesome-android-libraries 
		  b) https://github.com/wasabeef/awesome-android-ui
		  c) https://android-arsenal.com/
		  
	@ View and ViewGroup : ( https://developer.android.com/guide/topics/ui/declaring-layout )
		- view (widget) adalah obyek yang menggambar komponen tampilan ke layar yang mana pengguna dapat melihat dan berinteraksi langsung. komponen turunan view :
		  a) TextView
		  b) ImageView
		  c) RadioGroup->RadioButton
		  d) ListView
		  e) GridView
		  f) ScrollView
		  f) CheckBox
		- viewgroup (layout) adalah sebuah objek yang mewadahi obyek-obyek view dan viewgroup itu sendiri sehingga membentuk satu kesatuan tampilan aplikasi yang utuh. komponen turunan viewGroup :
		  a) LinearLayout = Akan menempatkan komponen-komponen di dalamnya secara horizontal atau vertikal
		  b) RelativeLayout
		  c)	FrameLayout
		  d) ConstraintLayout = Pembahasan ada bawah
		  e) TableLayout
		- Constraint Layout : ( https://developer.android.com/reference/android/support/constraint/ConstraintLayout )
		  Ketika Anda menggunakan constraint layout, hasil dari text editor menjadikan berkas layout tersebut menjadi lebih banyak, berbeda dengan Layout lain, adapun bagian dari constraintLayout :
		  a) RelativPositioning = salah satu dasar pembuatan tata letak di constraintlayout. Relative Positioning memungkinkan Anda untuk memposisikan widget secara relatif terhadap widget yang lain.
		  b) Margins = terdapat juga margin di constraint
		  c) Centering Positioning and Bias = untuk memindahkan posisi sesuai dengan keinginan Anda.
	
	@ Style and Theme : ( https://developer.android.com/design/index.html )
		- style
		  a) Style merupakan sebuah kumpulan properti yang dibutuhkan untuk mendefinisikan bagaimana sebuah komponen view dan layar jendela (bisa activity maupun fragment) ditampilkan
		  b) location: res →  values  →  styles.xml.
		  c) Contoh properti ini adalah height, width, background_color.
		- Theme
		  a) Theme atau tema itu sendiri merupakan sebuah style yang diterapkan khusus untuk activity dan application pada berkas AndroidManifest.xml
		  b) location : res →  values  →  styles.xml. dan res →  values  →  colors.xml 
		
	@ RecycleView : ( https://developer.android.com/reference/android/support/v7/widget/RecyclerView.html )
		- ini adalah versi update dari ListView
		- Recycle view memiliki 3 komponen :
		  |			|			|	  	|			|		|
		  | RecycleView 	|	------>	| Adapter	|	------>	| Dataset	| + Item Animator
		  |LayoutManager	|			|__________|			| ________	|
		  |_____________|
		  a) RecyclerView = Komponen antarmuka yang bertugas untuk menampilkan data set yang dimiliki di dalamnya. 
		     LayoutManager = akan mengatur posisi tampilan data baik itu secara list (vertikal), grid (baris dan kolom) atau staggeredgrid (grid yang memiliki susunan tak seragam / tak beraturan)
		  b) Adapter = Komponen yang akan mengatur bagaimana menampilkan data set ke dalam RecyclerView. 
		  c) Dataset = Kumpulan data yang dimiliki dan ingin ditampilkan. Bisa berupa array, list maupun obyek map.
		  d) ItemAnimator = untuk menambahkan animasi pada setiap itemnya
		  
	@ CustomView : ( https://developer.android.com/guide/topics/ui/custom-components = doc about custom view ) 
			    ( https://codelabs.developers.google.com/codelabs/advanced-android-training-custom-view-from-scratch/index.html?#0 = best practice from google )
		- bisa memberi ide mengenai kontrol apa saja yang bisa Anda berikan kepada CustomView yang Anda buat
	
	@ ActionBar and Navigation
		- Pada modul action bar dan navigation, kita akan belajar tentang action bar dan navigation drawer di dalam aplikasi Android
	
	@ Localozation
		- Untuk menambah jumlah pengguna dari aplikasi, tentunya kita perlu merangkul lebih banyak pengguna, baik dari dalam maupun luar negeri.
	
	@ Satuan Dimensi Android
		- dp (density pixel) adalah satuan untuk menentukan ukuran komponen non-text, ini adalah satuan yang lebih kompetibel bagi semua device dibanding dengan menggunakan px
		- sp (scale pixel) adalah satuan untuk menentukan ukuran komponen text 
		- docummentation untuk satuan dimensi android :
		  a) https://developer.android.com/guide/practices/screens_support.html (multi screen support)
		  b) https://jampasir.wordpress.com/2015/07/15/android-unit-px-pixel-dpdip-density-independent-pixel-dan-sp-scale-independent-pixels/ (about dp and sp)
		  		
5. Debugging : 
	- untuk debugging selalu perhatikan logcat pada bagian bahwa editor saat menjalankan aplikasi u/ mengetahui penyebabnya		
	- Bug yg menyebabkan forse close :
	  a) Java Null Pointer Exception
	  b) Java Out of Memory Exception
	  c) Java Index Out Of Bound
	  d) Java Memory Leak
	- Bug yang menyebabkan Not Responding = Android akan menganggap sebuah aplikasi sebagai not responding bila proses yang berjalan di main thread tidak selesai dalam waktu 5 detik
	- Bug yang disebabkan oleh kesalahan logika = bug yang berbahaya karena akan membuat aplikasi tidak sesuai apa yg diinginkan, walaupun tidak terjadi crash
	- Bisa juga memanfaatkan fitur bawaan android studio yaitu gambar BUG  / tekan shift + f9
	- Tool untuk memantau Bug  = https://firebase.google.com/docs/crashlytics/get-started?platform=android&utm_source=fabric&utm_medium=inline_banner&utm_campaign=fabric_sunset&utm_content=kits_crashlytics
	- forum untuk diskusi = https://www.dicoding.com/blog/android-studio-aplikasi-error-apa-yang-harus-dilakukan/
	- Selain Debugging , ada juga istilah LOGGING yang artinya suatu cara untuk mempresentasikan keadaan ( testing ), terhadap aplikasi untuk melihat apa yang terjadi / mencari kesalahan
			
6. Testing :
	@ Tipe Testing ada 3 :
	  - Local unit tests, Terletak pada direktori module-name/src/test/java/. = Tes ini berjalan pada local JVM dan tidak mempunyai akses ke API Android Framework. Biasanya untuk menguji sebuah method / fungsi berjalan sesuai rencana.
	  - Instrument Test , Terletak pada direktori module-name/src/androidTest/java/. = Tes ini harus berjalan pada peranti Android atau emulator. Digunakan untuk memvalidasi proses interaksi pada User Interface (UI) berjalan dengan lancar
	  - end to end test , Tes ini seperti Instrumented test, hanya proses yang dilakukan lebih lengkap dari awal sampai akhir, 
	  
	@ Gunakan JUnit4 (untuk unit testing) dan Mocito (sebagai mock object)
	
	@ UI Testing :
	  - User interface = merupakan media visual untuk berinteraksi dengan pengguna yang terdiri dari beragam komponen pembangun user interface seperti label, button, radiobutton, dan lain sebagainya.
	  - Selama proses pengujian, elemen properti yang menempel pada sebuah komponen user interface akan memberi pengaruh terhadap kondisi atau ‘state’ dari komponen tersebut.
	  - Pengujian user interface secara otomatis mampu melakukan pemberian input dan event pada komponen seperti click(), pressKey() dan lain sebagainya.
	  - Pengujian ini lebih menekankan ke perbandingan antara proses yang dilakukan dengan hasil yang diharapkan dalam sebuah skenario penggunaan.
	  - Pengujian user interface secara otomatis bergantung penuh pada teknologi yang digunakan. Dalam hal ini framework atau tools yang digunakan akan mempengaruhi hasil dari proses pengujian yang dilakukan.
	  
	@ Instrumentation testing with espresso : ( https://developer.android.com/training/testing/ui-testing/espresso-testing.html )
	  - Espresso merupakan sebuah framework pengujian yang tersedia pada Android Testing Support Library.
	  - tiga komponen utama espresso
	    a) ViewMatchers (onView(ViewMatcher)) : Diperuntukan untuk menemukan elemen atau komponen antarmuka yang diuji.
	    b) ViewActions (perform(ViewAction)) : Diperuntukan untuk memberikan event untuk melakukan sebuah aksi pada komponen antarmuka yang diuji.
	    c) ViewAssertions : Diperuntukan untuk melakukan pemeriksaan terhadap sebuah kondisi atau state dari komponen yang diuji.
	  - documentation :
	    a) https://www.vogella.com/tutorials/AndroidTestingEspresso/article.html#espresso_runningespressotests
	    b) https://developer.android.com/studio/test/espresso-test-recorder.html
	    c) https://guides.codepath.com/android/UI-Testing-with-Espresso
	  
7. Kotlin Android Extensions : ( https://kotlinlang.org/docs/tutorials/android-plugin.html )
	- adalah sebuah plugin yang memungkinkan kita untuk binding sebuah properti ke elemen view. 
	- Plugin ini secara otomatis akan memberi akses langsung ke semua view yang ada di dalam XML. 
	- Dengan demikian kita tidak perlu secara eksplisit melakukan binding ke elemen view menggunakan findViewByID() atau library lainnya.
	- untuk mengimplementasikan kotlin extension = import kotlin.android.synthetic, diikuti dengan nama XML yang akan kita bind ke activity.
	
8. Navigation :
	@ penjelasan Navigation
	  - adalah komponen yang digunakan untuk memepermudah berpindah halaman dan menerapkan behavior setiap halaman
	  - Sebaiknya gunakan package yang versi lama :
	    a) in gradle.app: 
		  apply plugin: "androidx.navigation.safeargs"
		  implementation "android.arch.navigation:navigation-ui-ktx:1.0.0"
	    	  implementation "android.arch.navigation:navigation-fragment-ktx:1.0.0"	
	    b) in gradle.project: 
	    	  classpath "android.arch.navigation:navigation-safe-args-gradle-plugin:1.0.0"
	  - dapat menerapkan behavior dari setiap action fragment dengan mudah 
	  - dapat membuat deep link
	  - dapat menerapakan slide animation
	  
	@ Navigation Lanjutan
	  - Task and Back Stack : ( https://developer.android.com/guide/components/activities/tasks-and-back-stack )
	  - Launch mode and flag ( https://medium.com/@evanfang/real-understand-tasks-and-back-stack-7ddf9a05b24b )
	    a) Mode Default = Setiap kali Intent, Instance baru terbuat. Bisa lebih dari satu di dalam sebuah task. 
	    b) singleTop | FLAG_ACTIVITY_SINGLE_TOP = Gunakan lagi instance jika sudah ada di paling atas task dan memanggil onNewIntent(). Jika tidak di paling atas, instance  akan dibuat lagi. 
	    c) singleTask | FLAG_ACTIVITY_NEW_TASK = Gunakan lagi instance jika sudah ada di dalam task yang sama di mana pun posisinya, kemudian memanggil onNewIntent().
	    d) singleInstance = Hanya ada satu instance di dalam satu task.
    	  - TaskStackBuilder ( https://developer.android.com/training/notify-user/navigation.html?utm_campaign=android_series_tasks_back_stack_051216&utm_source=medium&utm_medium=blog#DirectEntry )
    	
9. Material Design :
    	@ generally, Material Design Navigation ada dua jenis :
    	  - navigation drawer = sebuah panel yang berada di sisi kiri layar perangkat Android. Navigation drawer juga akan muncul ketika pengguna menekan ikon hamburger yang berada di sudut kiri panel action bar.
    	     ( https://material.io/components/navigation-drawer )
    	  - navigation bottom = adalah sebuah baris navigasi yang memungkinkan untuk melakukan perpindahan antar tujuan navigasi dalam suatu aplikasi. 
    	     ( https://material.io/components/bottom-navigation )
    	     
	@ dan ada satu material design yang jarang digunakan yaitu Tab Layout design
	
	@ AppBar / Action bar: ( https://developer.android.com/guide/topics/ui/look-and-feel )
		- adalah salah satu komponen penting di dalam struktur sebuah aplikasi Android.
		- keguanaan AppBar :
		  a) Memberikan ruangan kepada identitas app dan juga mengindikasikan lokasi pengguna pada saat menjalankan aplikasi.
		  b) Akses ke beberapa action penting dengan lebih mudah seperti action pencarian.
		  c) Sebagai navigation dan switch antar view (tampilan).	
	
	@ Toolbar 
		- Toolbar merupakan pengganti dari action bar yang mempunyai kontrol dan fleksibilitas lebih.
		- beberapa fitur dari Toolbar :
		  a) Navigation Button : Dapat berupa tombol up, navigation menu toggle, close, collapse, done, atau glyph lainnya.
		  b) Logo Aplikasi : Dapat dimodifikasi tinggi dan panjangnya.
		  c) Title & Subtitle : Title bisa menunjukkan di mana aplikasi sedang berada. Subtitle merupakan tambahan informasi tentang konten yang sedang diakses.
		  d) More Custom Views : Toolbar dapat ditambah dengan beberapa child views di dalamnya.
		  e) Action Menu : Akan berada pada sebelah kanan toolbar sesuai dengan tingkatannya yaitu frequent, important atau typical.

10. Localization : ( https://developer.android.com/guide/topics/resources/localization.html )
	- Documentation :
	  a) https://developer.android.com/training/basics/supporting-devices/languages.html
	  b) https://developer.android.com/guide/topics/resources/providing-resources.html
	  c) https://developer.android.com/guide/topics/resources/string-resource.html
	- Localization adalah upaya melokalkan konten dan resource (sumber daya) pada sebuah aplikasi agar dapat beradaptasi dengan kebutuhan budaya dan perkembangan di banyak negara yang menjadi target pasar aplikasi.
	- Pada dasarnya semua resource yang dimiliki oleh aplikasi dapat dilokalkan. Mulai dari aset gambar atau ikon, teks, audio, mata uang, dan ukuran. Di antara semua tipe tersebut, teks merupakan yang paling krusial. 
	
11. Content Description : ( https://www.deque.com/blog/android-imageviews-accessible-content-descriptions/ )
	- adalah fitur untuk mempermudah bagi pengguna berkebutuhan khusus, contohnya adalah teknologi text-to speech
	- text-to-speech yang dapat membaca isi dari sebuah aplikasi. Ketika pengguna menekan komponen antarmuka seperti textview, button, list, atau imageview, maka aplikasi dapat menyuarakan aksi yang dapat dilakukan oleh pengguna.
	- implementasinya cukup mudah :
	  a) aktifkan fitur talk back pada android
	  b) menambahkan attrb = android:contentDesctription = "value" -> pada view yang diinginkan
	  c) atau dengan cara = casting resource :	val nameVar = resource.getString(R.string.string_name)
	  								id_name.contentDescription = nameVar
	
12. Background Process = semua proces yang berkaitan dengan data yang berjalan dibalik UI
 	@ Threads: ( documentation berada di project )
 	  - Secara umum semua komponen aplikasi di Android berjalan pada proses dan thread yang sama. Ini disebut main thread atau ui thread. 
 	  - Secara default sistem Android tidak secara otomatis menciptakan thread lain untuk menjalankan proses secara spesifik, tapi thread lain bisa dibuat dengan kebutuhan tertentu
 	  - aturan untuk async task :
 	    a) Jangan memblok uithread atau main thread. Ini berarti kita harus menciptakan background thread atau async task yang bersifat asynchronous.
 	    b) Jangan melakukan pemanggilan komponen ui widget (seperti textview, button, imageview dsb) di dalam background thread atau thread yang sedang berjalan secara asynchronous.
 	  - adapun Thread untuk membuat web responsif dan powerful, yaitu thread async task / asyncronous
 	    a) asynchronous yaitu proses tidak berjalan berurutan, sehingga proses lain bisa masuk dan layar Android masih bisa kita jalankan.
 	    b) asynchronous membuat pengalaman pengguna menjadi lebih nyaman karena aplikasi tetap terasa responsif dan tidak mengalami freeze.
 	  - Thread adalah sekumpulan perintah (instruksi) yang dapat dilaksanakan (dieksekusi) secara beriringan dengan thread lainnya. 
 	  - Thread dicapai dengan menggunakan mekanisme time slice (ketika satu CPU melakukan perpindahan antara satu thread ke thread lainnya) atau multiprocess (ketika thread tersebut dijalankan oleh CPU yang berbeda dalam satu sistem). 
 	   	
 	@ Service: ( https://developer.android.com/reference/android/app/Service.html )
 	  - Service merupakan komponen tak terlihat yang dapat digunakan untuk menjalankan suatu proses di dalam aplikasi. Service biasanya digunakan untuk menjalankan proses yang memakan waktu lama atau yang membutuhkan komputasi intensif.
 	  - ada dua cara untuk memulai service :
 	    a) Started Service = Service berjenis ini adalah tipe yang dijalankan oleh komponen lain, misal activity. Sekali dijalankan, service ini akan berjalan selama belum dimatikan atau proses yang dijalankan selesai.
 	    b) Bound service = Service jenis ini merupakan tipe service yang dijalankan oleh komponen lain, Service ini akan tetap berjalan di background selama masih ada komponen lain yang mengikatnya.
 	
 	@ Receiver
 	  - Broadcast Receiver = broadcast receiver adalah cara sederhana untuk menindaklanjuti sebuah broadcast message yang dipancarkan oleh dirinya sendiri, aplikasi lain atau sistem Android.
 	  - documentation :
 	    a) https://developer.android.com/reference/android/content/BroadcastReceiver.html
 	    b) https://www.vogella.com/tutorials/AndroidBroadcastReceiver/article.html
 	    c) https://www.tutorialspoint.com/android/android_broadcast_receivers.htm
 	    
13. Alarm Manager / Scheduler ( https://developer.android.com/reference/android/app/AlarmManager.html ) ( https://developer.android.com/training/scheduling/alarms.html#/h )
	- adalah menentukan sebuah proses yang di jalankan secara terjadwal
	- kelebihan menggunakan AlarmManager :
	  a) Dapat menjalankan obyek intent berdasarkan waktu dan interval yang ditentukan.
	  b) Bisa bekerja dengan baik bersama broadcast receiver untuk menjalankan komponen lain seperti service untuk melakukan operasi tertentu.
	  c) Alarm berjalan di luar daur hidup aplikasi induknya sehingga kita bisa merancang fungsi alarm untuk melakukan sebuah aksi ketika aplikasi sedang tidak dijalankan,
	  d) Esensi utama dari alarm manager adalah untuk meminimalkan penggunaan resource dan menghindari penggunaan timer dan background service  
	
14. Connect To Web API and Parsing JSON
	@ Web API : ( https://www.youtube.com/watch?v=s7wmiS2mSXY&ab_channel=MuleSoftVideos )
	  - link for looking public API :
	    a) https://any-api.com/
	    b) https://github.com/public-apis/public-apis
	    c) https://github.com/farizdotid/DAFTAR-API-LOKAL-INDONESIA
	  - salah satu bagian dari web API yang sering digunakan , yaitu Rest((REpresentation State Transfer)) API  
	  - Pada protokol Rest API, terdapat beberapa request method yang biasa digunakan untuk proses CRUD (Create Read Update Delete), di antaranya adalah:
	    a) POST : Untuk membuat data (Create)
	    b) GET : Untuk membaca data (Read)
	    c) PUT : Untuk mengubah data (Update)
	    d) DELETE : Untuk menghapus data (Delete)
	    
	@ JSON
	  - documentation :
	    a) JSON Parsing = https://stackoverflow.com/questions/9605913/how-do-i-parse-json-in-android
	    b) about JSON = https://www.json.org/json-id.html and https://www.youtube.com/watch?v=hrfuFt9YUQI&feature=youtu.be&t=2213&ab_channel=DicodingIndonesia
	
	@ Library for Halper
	  - " implementation 'com.loopj.android:android-async-http:1.4.9 "
	  
15. Job Scheduler : ( https://medium.com/google-developers/scheduling-jobs-like-a-pro-with-jobscheduler-286ef8510129#.jr7ue1y8q ) 
			    ( https://www.youtube.com/watch?v=XFN3MrnNhZA&index=36&list=PLWz5rJ2EKKc-lJo_RGGXL2Psr8vVCTWjM&ab_channel=AndroidDevelopers )
	- Kelebihan yang ditawarkan oleh job scheduler adalah ia dapat menjalankan beragam proses secara bersamaan. Efek positifnya adalah daya tahan baterai akan lebih terjaga dari pada Alarm Manager
	
16. WorkManager : ( https://medium.com/androiddevelopers/introducing-workmanager-2083bcfc4712 )
			  ( https://codelabs.developers.google.com/codelabs/android-workmanager/#0 )	
			  ( https://developer.android.com/topic/libraries/architecture/workmanager )
			  ( https://developer.android.com/guide/background/ )
			  
17. ViewModel
    - ViewModel = Kelas ViewModel dirancang untuk menyimpan dan mengelola UI. Kelas ViewModel memungkinkan kita untuk dapat mempertahankan data ketika terjadi configuration changes seperti rotasi layar.
    - AndroidViewModel = AndroidViewModel adalah subclass dari ViewModel yang memiliki fungsi yang mirip. Jika kamu membutuhkan context di dalam pattern ViewModel,
                         kamu bisa menggunakan AndroidViewModel, karena kita bisa memanggil getApplicationContext di dalamnya. 
                         
                         
18. Local Storage : ( documentation already on android web )
	- local storage adalah penyimpanan lokal yang khusus yang berada di dalam android untuk menyimpan file mentah
	- local storage akan tersimpan pada sd-card pada perangkat androidS
	- penyimpanan ini bisa hilang bila user menghapusnya
	
19. Shared Preferences : ( https://blog.sekolahmobile.com/penggunaan-shared-preferences-pada-android-dengan-kotlin/ )
	- Shared Preferences merupakan media penyimpanan yang hanya bisa menyimpan data sederhana berupa data yang bertipe primitif (seperti Float, Int, Long, String dan Boolean) dalam file internal yang ada di aplikasi dalam bentuk key-value. 
                         
    
	
	
	